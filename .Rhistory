cursos <- c(rep(12671,10))
pergunta1 <- c(1,2,3,4,5,6,7,7,2,1)
pergunta2 <- c(1,1,2,1,3,4,2,1,3,3)
df <- data.frame(cursos,pergunta1,pergunta2)
df
df %>%
group_by(cursos) %>%
summarise_all(table())
library(dplyr)
df %>%
group_by(cursos) %>%
summarise_all(table())
df %>%
group_by(cursos) %>%
table()
df %>%
group_by(cursos) %>%
count()
df
df %>%
group_by(cursos) %>%
tally()
df %>%
group_by(cursos) %>%
tally_all()
df %>%
group_by(cursos) %>%
count_()
df %>%
group_by(cursos, pergunta1) %>%
count()
df %>%
group_by(cursos, pergunta1, pergunta2) %>%
count()
df %>%
count(cursos) %>%
df %>%
count(cursos)
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
library(reshape2)
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt() %>%
group_by(cursos) %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt()
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
cursos <- c(rep(12671,10), rep(12672,10))
pergunta1 <- rep(c(1,2,3,4,5,6,7,7,2,1), 2)
pergunta2 <- rep(c(1,1,2,1,3,4,2,1,3,3), 2)
df <- data.frame(cursos,pergunta1,pergunta2)
library(dplyr)
library(reshape2)
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
group_by(cursos) %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
group_by(cursos)
?summarise_all
df %>%
group_by(cursos) %>%
summarise_all(table)
df %>%
group_by(cursos) %>%
summarise_all(sum)
df %>%
group_by(cursos) %>%
summarise_all(count())
summarise_all(count
df %>%
group_by(cursos) %>%
summarise_all(count)
df %>%
group_by(cursos) %>%
summarise_all(length)
df %>%
group_by(cursos) %>%
summarise_each(table)
df %>%
group_by(cursos) %>%
summarise_each(freq)
df %>%
group_by(cursos) %>%
summarise_all(freq)
?freq
df %>%
group_by(cursos, pergunta1) %>%
count()
df %>%
group_by(cursos, paste("pergunta", 1:2, sep="")) %>%
count()
df
df %>%
melt()
df %>%
melt() %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt() %>%
dcast(value ~ variable + cursos, fun.aggregate=length)
df %>%
melt()
df %>%
melt(id="cursos")
df %>%
melt(id="cursos") %>%
group_by(cursos)
df %>%
melt(id="cursos") %>%
group_by(cursos, variable)
df %>%
melt(id="cursos") %>%
group_by(cursos, variable) %>%
count()
df %>%
melt(id="cursos") %>%
group_by(cursos) %>%
count()
df %>%
melt(id="cursos") %>%
group_by(cursos) %>%
freq()
df %>%
melt(id="cursos") %>%
group_by(cursos) %>%
frequency()
df %>%
melt(id="cursos") %>%
group_by(cursos)
df %>%
melt(id="cursos") %>%
dcast(value ~ variable, fun.aggregate=length)
cursos <- c(rep(12671,10), rep(12672,10))
pergunta1 <- rep(c(1,2,3,4,5,6,7,7,2,1), 2)
pergunta2 <- rep(c(1,1,2,1,3,4,2,1,3,3), 2)
df <- data.frame(cursos,pergunta1,pergunta2)
df %>%
melt(id="cursos") %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt(id="cursos") %>%
dcast(value ~ variable, fun.aggregate=length)
df %>%
melt(id="cursos")
df %>%
melt(id="cursos") %>%
dcast(value ~ variable + cursos, fun.aggregate=length)
cursos <- c(rep(12671,10))
pergunta1 <- c(1,2,3,4,5,6,7,7,2,1)
pergunta2 <- c(1,1,2,1,3,4,2,1,3,3)
df <- data.frame(cursos,pergunta1,pergunta2)
df %>%
melt(id="cursos") %>%
dcast(value ~ variable + cursos, fun.aggregate=length)
df %>%
melt(id="cursos")
df %>%
melt(id="cursos") %>%
dcast(value ~ variable + cursos, fun.aggregate=length)
df %>%
melt(id="cursos") %>%
dcast(value ~ variable + cursos)
df %>%
melt(id="cursos") %>%
acast(value ~ variable + cursos)
df %>%
melt(id="cursos") %>%
cast(value ~ variable + cursos)
?dcast
df
iris
summary(iris)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris        <- read.csv(url)
names(iris) <- c("c_sepala", "l_sepala", "c_petala", "l_petala", "especie")
iris$especie <- gsub("Iris-", "", iris$especie)
summary(iris)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris        <- read.csv(url)
names(iris) <- c("c_sepala", "l_sepala", "c_petala", "l_petala", "especie")
iris
gsub("Iris-", "", iris$especie)
iris$especie <- gsub("Iris-", "", iris$especie)
summary(iris)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris        <- read.csv(url)
names(iris) <- c("c_sepala", "l_sepala", "c_petala", "l_petala", "especie")
iris$especie <- as.factor(gsub("Iris-", "", iris$especie))
summary(iris)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris        <- read.csv(url, header=FALSE)
names(iris) <- c("c_sepala", "l_sepala", "c_petala", "l_petala", "especie")
iris$especie <- as.factor(gsub("Iris-", "", iris$especie))
summary(iris)
library(ggplot2)
iris
ggplot
ggplot(iris) +
geom_histogram(aes(x=c_sepala)) +
geom_histogram(aes(x=l_sepala))
library(corrplot)
correlacao <- cor(iris[, -5])
corrplot.mixed()
corrplot.mixed(correlacao)
correlacao
corrplot.mixed(correlacao, upper="ellipse")
library(corrplot)
correlacao <- cor(iris[, -5])
corrplot.mixed(correlacao, upper="ellipse")
iris %>%
group_by(especie) %>%
summarise(correlacao=cor(x, y))
iris %>%
group_by(especie) %>%
summarise(correlacao=cor(., ,))
iris %>%
group_by(especie) %>%
summarise(correlacao=cor(., .))
iris %>%
group_by(especie) %>%
summarise(correlacao=cor(c_sepala, .))
iris %>%
group_by(especie) %>%
do(cor())
blogdown::build_site()
library(GGally)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
library(GGally)
ggpairs(iris, aes(colour = especies, alpha = 0.4))
library(GGally)
ggpairs(iris, aes(colour = especie, alpha = 0.4))
ggpairs(iris[, -5], aes(colour = especie))
ggpairs(iris, aes(colour = especie))
ggpairs(iris[, -5], aes(colour = iris$especie))
ggplot(iris, aes(x=c_petala, y=largura_petala, colour=especie)) +
geom_point()
ggplot(iris, aes(x=c_petala, y=l_petala, colour=especie)) +
geom_point()
?ggpair
?ggpairs
iris %>%
group_by(especie) %>%
summarise(cor(l_petala, c_petala))
library(rpart.plot)
prp(modelo, extra=1)
library(rpart)
modelo <- rpart(Species ~ ., method="class", data=iris)
#knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo=TRUE)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
modelo <- rpart(especie ~ ., method="class", data=iris)
prp(modelo, extra=1)
?poly
set.seed(1234)
ajuste_lm   <- lm(dist ~ speed)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE))
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm)) +
geom_line(aes(y=ajuste_poly))
library(tidyverse)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm)) +
geom_line(aes(y=ajuste_poly))
#knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo=TRUE)
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm)) +
geom_line(aes(y=ajuste_poly))
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm)) +
geom_line(aes(y=ajuste_poly))
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm, colour="Modelo Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Modelo Sobreajustado"))
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 10, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point() +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist, colour=grupo)) +
geom_point() +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(colour=grupo) +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(colour=grupo)) +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(pch=grupo)) +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(pch=grupo), show.legend = FALSE) +
geom_line(aes(y=ajuste_lm, colour="Ajustado")) +
geom_line(aes(y=ajuste_poly, colour="Sobreajustado")) +
labs(x="X", y="Y", colour="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(colour=grupo), show.legend = FALSE) +
geom_line(aes(y=ajuste_lm, linetype="Ajustado")) +
geom_line(aes(y=ajuste_poly, linetype="Sobreajustado")) +
labs(x="X", y="Y", linetype="Modelo")
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(colour=grupo), show.legend = FALSE) +
geom_line(aes(y=ajuste_lm, linetype="Ajustado")) +
geom_line(aes(y=ajuste_poly, linetype="Sobreajustado")) +
labs(x="X", y="Y", linetype="Modelo")
fitControl <- trainControl(method = "cv",
number = 5)
ilbrary(caret)
library(caret)
fitControl <- trainControl(method = "cv",
number = 5)
ajuste_iris <- train(especie ~ .,
data = iris_treino,
method = "rf",
importance = TRUE,
trControl = fitControl)
#knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(echo=TRUE)
# definir o endereco do conjunto de dados e baixa-lo
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris        <- read.csv(url, header=FALSE)
names(iris) <- c("c_sepala", "l_sepala", "c_petala", "l_petala", "especie")
# remover a string 'Iris-' do inicio de cada tipo de especie
iris$especie <- as.factor(gsub("Iris-", "", iris$especie))
# estatistica descritiva basica
summary(iris)
library(corrplot)
correlacao <- cor(iris[, -5])
corrplot.mixed(correlacao, upper="ellipse")
library(tidyverse)
theme_set(theme_bw())
ggplot(iris, aes(x=c_petala, y=l_petala)) +
geom_point()
ggplot(iris, aes(x=c_petala, y=l_petala, colour=especie)) +
geom_point()
library(GGally)
ggpairs(iris[, -5], aes(colour = iris$especie))
library(rpart)
library(rpart.plot)
modelo <- rpart(especie ~ ., method="class", data=iris)
prp(modelo, extra=1)
ajuste_lm   <- lm(dist ~ speed, data=cars)
ajuste_poly <- lm(dist ~ poly(speed, 20, raw=TRUE), data=cars)
cars2 <- data.frame(cars, ajuste_lm=predict(ajuste_lm, cars), ajuste_poly=predict(ajuste_poly, cars))
cars2$grupo <- NA
cars2$grupo <- ifelse(predict(ajuste_poly, cars) > cars$dist, "g1", "g2")
ggplot(cars2, aes(x=speed, y=dist)) +
geom_point(aes(colour=grupo), show.legend = FALSE) +
geom_line(aes(y=ajuste_lm, linetype="Ajustado")) +
geom_line(aes(y=ajuste_poly, linetype="Sobreajustado")) +
labs(x="X", y="Y", linetype="Modelo")
library(caret)
# definir 75% dos dados para treino, 25% para validacao
trainIndex  <- createDataPartition(iris$especie, p=0.75, list=FALSE)
iris_treino <- iris[ trainIndex, ]
iris_teste  <- iris[-trainIndex, ]
fitControl <- trainControl(method = "cv",
number = 5)
ajuste_iris <- train(especie ~ .,
data = iris_treino,
method = "rf",
importance = TRUE,
trControl = fitControl)
summary(ajuste_iris)
ajuste_iris
predict(ajuste_iris, iris_teste)
confusionMatrix(predict(ajuste_iris, iris_teste))
?confusionMatrix
predicao <- predict(ajuste_iris, iris_teste)
confusionMatrix(predicao, iris_teste)
predicao <- predict(ajuste_iris, iris_teste)
confusionMatrix(predicao, iris_teste$especie)
varImp(ajuste_iris)
plot(varImp(ajuste_iris))
library(ggfortify)
autoplot(varImp(ajuste_iris))
ggplot(varImp(ajuste_iris))
ggplot(varImp(ajuste_iris)) +
geom_point()
ggplot(varImp(ajuste_iris))
plot(ajuste_iris)
ggplot(ajuste_iris)
library(ggplot2)
ggplot(ajuste_iris)
ggplot(confusionMatrix(predicao, iris_teste$especie))
library(caret)
ggplot(confusionMatrix(predicao, iris_teste$especie))
confusionMatrix(predicao)
confusionMatrix(iris_teste)
fitControl <- trainControl(method = "cv",
number = 5,
savePredictions = TRUE)
ajuste_iris <- train(especie ~ .,
data = iris_treino,
method = "rf",
importance = TRUE,
trControl = fitControl)
install.packages("plotROC")
library(plotROC)
ggplot(ajuste_iris) + geom_roc()
ajuste_iris
